
// Autogenerated polygon class for Polyquad
// sides = 6
// k_max = 20
// precision = 40

#ifndef POLYQUAD_SHAPES_POLY_HPP
#define POLYQUAD_SHAPES_POLY_HPP

#include "shapes/base.hpp"
#include "utils/ortho_poly.hpp"

#include <Eigen/Dense>

#include <array>
#include <cassert>
#include <iostream>
#include <vector>

namespace polyquad {

template<typename T>
class PolyDomain : public BaseDomain<PolyDomain<T>, T, 2, 4>
{
public:
    typedef BaseDomain<PolyDomain<T>, T, 2, 4> Base;
    typedef typename Base::MatrixXT MatrixXT;
    typedef typename Base::VectorXT VectorXT;
    typedef typename Base::ArrayXT ArrayXT;
    typedef typename Base::MatrixPtsT MatrixPtsT;
    typedef typename Base::VectorOrb VectorOrb;

    typedef Eigen::Matrix<T, 2, 1> Vector2T;

public:
    PolyDomain() : Base(T(2.598076211353315940291169512258808550415))
    {}

    void configure_d(int qdeg, bool poswts, const VectorOrb& orbits);

    static bool validate_orbit(const VectorOrb& orb)
    { return orb(0) <= 1; }

private:
    friend class BaseDomain<PolyDomain<T>, T, 2, 4>;

    static constexpr int npts_for_orbit[] = {1, 6, 6, 12};
    static constexpr int narg_for_orbit[] = {0, 1, 1, 2};
    static constexpr int nbfn_for_qdeg(int qdeg);

    void expand_orbit(int i, int aoff, int poff,
                      const VectorXT& args, MatrixPtsT& pts) const;

    void seed_orbit(int i, int aoff, VectorXT& args);

    template<typename D1, typename D2>
    void eval_orthob_block(const D1 pq, D2 out) const;

    template<typename ReplaceF>
    static void collapse_arg(int i, int aoff, const VectorXT& args, ReplaceF replace, const T& tol);

    static void clamp_arg(int i, int aoff, VectorXT& args);

    static void sort_arg(int i, int aoff, VectorXT& args);

private:
    static Vector2T vector2d(const T& p1, const T& p2)
    { return {p1, p2}; }
};

template<typename T>
inline void
PolyDomain<T>::configure_d(int qdeg,
        bool poswts,
        const VectorOrb& orbits)
{
    std::vector<T> b_exact = {
        T(2.598076211353315940291169512258808550415),
T(5.817901629236948780822053666397447665241e-17),
T(-0.4871392896287466224465616988095461012267),
T(-1.888912220232117062282970688714497651697e-18),
T(-0.06089241120359339946840211787259191663267),
T(-4.316570345974472841023814997348778947006e-17),
T(0.04376642055258274390594309467075346976475),
T(5.678422794089207119474872439347805883549e-18),
T(-0.008325134344241329625880625403824834402515),
T(2.43558946414132963698648982785868864682e-17),
T(-0.008042674428990242352841627103712649810836),
T(-1.87622259451394537490584507280231559485e-17),
T(0.008070548762732150712283654488648907138537),
T(-2.58722174010668647428647251370400837955e-18),
T(-0.001859943954691220808464628074417111237869),
T(9.817806022060220532997930556701263163759e-18),
T(-0.002680055488282546656510021322900624295284),
T(-2.249382121768498220352050851438276606275e-18),
T(0.002985940233236183366410264171196024892007),
T(1.627539558407408527665439552388319481125e-18),
T(-0.0007289616626376397795884674205938645869887),
T(-1.007690121527614406288974185795659046438e-16),
T(-5.038450607638072031444874781813390431665e-17),
T(3.972686265783220482684041099383149032454e-17),
T(5.537844297133142118605121300083824197908e-17),
T(-5.564612813476196557123353429641450728801e-18),
T(-3.637367888441803607468952619156559055993e-17),
T(-2.17207488557700952193262933869072032173e-17),
T(1.719185026877140295413876833825508256946e-17),
T(3.139600359757415190374601224216314608079e-17),
T(-1.161952398101895194689509284247619942853e-17),
T(-2.208572973034172475439059101643526070794e-17),
T(1.269506822322977043926111935239932800113e-17),
T(4.938610068249582059867848311192080526504e-18),
T(-9.982470226375886943338534814524145312162e-18),
T(5.414053892580315220141030427720525527582e-18),
T(3.914802684223948114649307820690819305138e-18),
T(-4.480248520522860713978881347657875661968e-18),
T(-2.424542441074656274156092687515013093746e-18),
T(-1.576863258841757228387083999913087513457e-18),
T(6.278365723637583652383194567464269524668e-18),
T(5.407046051434391310578830633772302814054e-18),
T(-0.4871392896287466079018076257171761033855),
T(-4.988255392080291646394994479960682504816e-17),
T(0.008118988160479024644845948637970555177221),
T(2.575924712925746716778971837822237470106e-17),
T(0.04757219625280731073915514883113174804569),
T(3.863837069147298464852279784181466110836e-18),
T(0.0140813700908309761422525661289782137785),
T(1.693278561548170972336567899731969207696e-18),
T(-0.01245499563143810403544005805816811588478),
T(-6.702246699033168030388079621341156858466e-18),
T(-0.0004847479372635334898404248052586544896356),
T(1.961346502552437909438807432217620428177e-18),
T(0.004810837067663794192271998636690416772488),
T(5.97525350718174197093376581298707719176e-18),
T(-0.002459895434838681283570226356637595397578),
T(-6.609576057006393970583482999358024282067e-18),
T(-0.0008344524336913687927773021534634969609399),
T(8.432927941505731786818003028581284419315e-19),
T(0.001884591791202501949991525412296235004713),
T(-5.457785063306993277917766207599200343453e-19),
T(-0.0008570798628682183952915419870270881943135),
T(4.744574925810287601520231016410277870804e-17),
T(2.680619538023274497507638422448560133473e-17),
T(-2.949394743678932372783190218098709389289e-17),
T(-3.039754984969834175776688519495993403196e-17),
T(1.63995255778664967197739395433569624528e-17),
T(2.063951830401687387065273755713262755867e-17),
T(2.996005216876646049203344344860840482262e-18),
T(-1.324067575850926250095782447339029232253e-17),
T(-1.594371542549259918273829774206541024594e-17),
T(1.470732692214830989633810378588579016657e-17),
T(1.464749441103183793090354696144430220106e-17),
T(-1.549082791776220289239539732994510624948e-17),
T(-3.391150329693710280147748812518833366642e-18),
T(8.618589073065055862055172079027440355372e-18),
T(-5.411570798339288044524890702879274096852e-18),
T(8.311417989636678200810334714466432145924e-19),
T(6.266492462405565623089366351392129440445e-18),
T(-2.515413472458710960776655923864958272225e-18),
T(-3.298762636605995247742826181258631767341e-18),
T(-3.032653524884390629598331057228594767593e-18),
T(1.215683546623683656350078464252084277456e-18),
T(-0.06089241120359344653616259045210684370388),
T(4.01332449263937870854872039171608782942e-17),
T(0.08562995325505319834221103295607226284393),
T(-2.599178023051344542831661745512348558571e-17),
T(-0.01707313265517417544876073905672350645271),
T(4.134608283636499760096651295197871622493e-18),
T(-0.02667016252423010999394536205280717452363),
T(-2.09782098641974251811585587201308235192e-18),
T(0.003718436121166691387621592026798819973337),
T(-1.41382277481726554286591495819562249891e-19),
T(0.006757323362284158747600414973006203786091),
T(3.853900241746535481664962756478351147235e-18),
T(-0.002907118794692118757604213034127274057537),
T(-7.486538286496052160800607523240069590651e-18),
T(-0.001156940010153552291803404956688362318233),
T(6.780836630031095621121340230798248556489e-18),
T(0.001668537698491563990880780025269712035845),
T(-1.280028845896315248340851672392420136056e-18),
T(-0.0004067321314292584718250634025088776604371),
T(-1.06971144543026327590848426841446429886e-20),
T(-0.0005428217780786108731993431541253413713535),
T(2.831359367666302208079354978189673165068e-17),
T(8.21641346990777416391849002804256308098e-18),
T(8.824469098586998044346303332594771029933e-18),
T(-5.315574387754461119937474688120664557298e-18),
T(-2.411931010858335564613270257041248765625e-17),
T(-6.152525017973171298589179922892128450928e-19),
T(1.974934633795948101148679762377728599424e-17),
T(8.762189634158930504686356837525773484011e-18),
T(-6.413450630462442284391187181845413071566e-18),
T(-1.50627586441043557018568147255708481027e-17),
T(-2.256417849239445462686447251112331746266e-18),
T(1.299953903765712218788482459938317921273e-17),
T(6.639602404070242987081590714051309208567e-19),
T(-4.149736825657275918189040385906537100547e-18),
T(3.804694584001233795481715299631953729234e-18),
T(-4.321702862671077612282321747734496176013e-18),
T(-5.127206606161463652673377109489766581989e-18),
T(5.059300583166425700477889300943715528618e-18),
T(4.854381409627180553234873204990313458568e-18),
T(-2.026830887757518411745130529688024764345e-19),
T(-4.990411491547372576964470423516901020523e-18),
T(-0.03996064485235813115321129066529445997281),
T(-1.75921684019087392498631057770752983831e-17),
T(-0.007865269780464163167171921221823585061319),
T(9.436557663167310175681053691710818464818e-18),
T(-0.01453925247976422880146083389749241647323),
T(2.627753809646244551455395064031965837537e-19),
T(0.009420095351742795908826351442983363626294),
T(7.312269807285542884834727396012330214241e-19),
T(0.01308400900808793910622285593710271120988),
T(1.310121369523141464165449680819968582708e-18),
T(-0.004330030942804275350877412105227484284458),
T(-2.098912394016702964408681001082239674653e-18),
T(-0.005203096270090553602852836589795933772823),
T(3.295539658117638023709083228245021488033e-18),
T(0.003397414669328879432874198890725890943431),
T(-4.07339153576229283747798749536013580189e-18),
T(0.0009483654465048287843862145887867643067998),
T(8.22128135669531572574787331518176006895e-19),
T(-0.002111367182159307684894621747861650133839),
T(9.818280063065896678382654658353610993388e-19),
T(0.000734734543450013220306604113840548327072),
T(-1.88622806681232534877800768275223158296e-17),
T(-1.190789987493525237615329962082553943034e-17),
T(-9.159402304381649165400688141887817974218e-18),
T(7.429167781989293955800897060804339994018e-18),
T(2.181423429722014891728562917846978432926e-17),
T(1.776936303359365840813954921912890100444e-18),
T(-1.885884304699689533820997226736292975061e-17),
T(-9.714940902667442285963474061669971603424e-18),
T(6.575361354114912028725819527105544011935e-18),
T(1.147368024173416802163992161058340098288e-17),
T(2.515521603094153043165818261167929247327e-18),
T(-6.907376446750454401535600163130824132809e-18),
T(-1.288378079257263170096663259964752342295e-18),
T(1.476522197551904112103986732351743162793e-18),
T(-2.757087588815511122872557373714379724151e-18),
T(2.484924528886646522586140397311664623888e-18),
T(2.686613472134159422949044737345036841109e-18),
T(-2.832038325111849610666165248796702211872e-18),
T(-6.892292663018515494120843644972673986083e-19),
T(3.685396317369921049816343677369039210558e-19),
T(5.611585647497978664589976891405776000371e-19),
T(0.03702702608343500489250191756840623484857),
T(7.237713490719936477178844467060425785236e-18),
T(-0.001299315610154777478240357777669022182915),
T(-4.935110381198957245109442503838360678416e-18),
T(0.009471698605490575750442748000375451073354),
T(2.920847148612085044424125809135178101175e-18),
T(0.001494209467386293553048269271239394878058),
T(-3.530766012754873263974947614377657789949e-18),
T(-0.009077301975838489242543249869586007332128),
T(-5.070119173455630482860428864011464583966e-19),
T(-0.004201355777458039736955138755813360259002),
T(-4.489336840252967428426609944317637712114e-19),
T(0.004503363805533972042342009103509522652023),
T(1.632584561066601913484992951196670560032e-18),
T(0.002029314570864845964390693882861263901672),
T(9.868684143105656688181014771970710820981e-20),
T(-0.002581619679958605181113105809155217205709),
T(5.894367636881700161955451815563958110675e-19),
T(-0.0002635725761630535244010970565868555521494),
T(-1.599745181872093998919664576696534293913e-18),
T(0.001451803411845417629360126746061148987799),
T(-1.251876683342598363296818349800730569337e-17),
T(9.444971128756011548900451921516629642786e-19),
T(1.154630631659825883593318280044810393975e-17),
T(2.781948287947888757554829723167594805134e-18),
T(-1.075953101299333920376485479859042093183e-17),
T(-5.647743730843236228514542008573872381244e-18),
T(5.467877366652750649436868045784562933888e-18),
T(6.395349007382400578455821820940697109203e-18),
T(3.387614488734343430907126276373503068733e-18),
T(-3.955278582965082978155184733168231983107e-18),
T(-8.537775705329128978016233187167454184005e-18),
T(8.15499945281130983197899521526763063378e-19),
T(4.742201840040012790233592440656967137906e-18),
T(-3.222496839632922627761850839922113062786e-20),
T(7.652060326030250337773239821610936503405e-19),
T(-1.472153900185586158752428488171775785077e-18),
T(-1.422841173489413102884437506561666942842e-18),
T(2.540502178381353120501212192469672032888e-18),
T(-8.398743993802503410359330382496585934641e-19),
T(-5.353423706813268371253970358168890349052e-19),
T(1.657709593810365078785358628327819826939e-18),
T(0.02751754226998326820549584008396279413734),
T(-5.467961717792264101752642914325962325548e-18),
T(-0.01770418397377077909055120541089153287949),
T(7.091518341862641731719049230948516914482e-18),
T(-0.0003134936166814227191739608837247633497017),
T(-7.803144414600710945306405324056868007533e-18),
T(-0.001362662937159641867253777812333407680705),
T(5.52422924277598485671897293705094540151e-18),
T(0.0005832010199247497481084935665161870526936),
T(1.717816145036447136030000154896748233231e-18),
T(0.006127921207768210471683797366912253079407),
T(-8.859225006739951528974537204976134937211e-19),
T(0.001138393530890843725118684600519221753323),
T(-1.617911042267110198980096733015100906266e-18),
T(-0.004409825876943934825960522527846162202808),
T(3.209415414984401097430993397306419983344e-19),
T(-0.0002368227503709409083993316973696194646682),
T(-4.703604884240094540364313549207228462126e-19),
T(0.002482157366871169997895895098789035430944),
T(1.173411266037983062301668805678835887155e-18),
T(-0.0006640569447852101587646192054934161938048),
T(-7.401985550988433447606234332072030297627e-18),
T(1.826387289983108314646701155793498126227e-18),
T(3.3019331719810445298006301638495726811e-18),
T(-2.408377400681782642305479264173975909208e-18),
T(-2.334420270645794097500981704302914813171e-18),
T(7.671933817661841996044216007999707512227e-19),
T(1.476130126608230700076320710484362946863e-18),
T(7.074123529185304961108938434389687416684e-20),
T(-4.292850387190970048255267071008219331108e-18),
T(-6.141127396211837383725482483819456252706e-19),
T(8.088502941054466532198980461967265096491e-18),
T(6.519083914140448687476574582919623912226e-19),
T(-6.866921059156993757416672541818525261744e-18),
T(-3.488606719906962453319168293537188811013e-19),
T(2.710900916479402000760922986725089135764e-18),
T(2.823622514168967861136586948636615097345e-18),
T(4.409952048766931539208180105753695960991e-19),
T(-3.738760970528490180415110613773489721556e-18),
T(-1.279674999335601913117390917760697115642e-18),
T(-4.289097006105534806030541940406607624232e-19),
T(7.620255202071778434740092458210264176993e-19),
T(0.01388327649237199906837133343295058515122),
T(9.204808867979645948621885953080425597694e-19),
T(-0.0008662587997103825662771222127636789659054),
T(-2.532566047706979086799122700370304779861e-18),
T(0.004739188415641452061910596488129872355728),
T(4.226760766481577298117401685749769438929e-18),
T(0.001682320025653366992065320398923254411097),
T(-2.245673933105325932911516707975217429474e-18),
T(-0.001108244617531873906523219936563528274791),
T(-4.279932340094909053543637600244816422763e-18),
T(-0.002324140014266407979849912782350288889996),
T(2.946315600220030779414611420569827785812e-18),
T(-0.002781460615584530656475889685108806780423),
T(-6.364809172684069467481796982404850261782e-20),
T(0.0006627800665541823546570149169682421382532),
T(4.04831359739548329011951029058659927902e-19),
T(0.002874454711466889471293349282582038949775),
T(4.666814888509556722858674959797954097114e-19),
T(-0.000507034247865245282488995329224152342707),
T(-1.159726450215011977146352626053630045167e-18),
T(-0.001905993564481035848903069453819526705007),
T(1.498087525349685099385496164610466532899e-17),
T(-1.620637195421105346951369172062894939418e-18),
T(-9.172489590865482127172360985275130182727e-18),
T(5.827888995831999276401994444334367924049e-19),
T(7.013667734263590107569929027945457920319e-18),
T(1.99087992313801799221180506790909522485e-18),
T(-2.079395007022885898319189149610646892459e-18),
T(-1.543943997434342156189862447154850140234e-18),
T(3.560355120760167599558232235051905778841e-19),
T(-4.87946706937834690689234839035770937342e-19),
T(-3.113068000612602281409046771075972274951e-18),
T(1.904474281855606086618164437057873971097e-18),
T(5.121397691656067473563397190654299556592e-18),
T(-1.095799781827370891689194472763861933431e-18),
T(-4.033877707078201650848226095134875302868e-18),
T(-2.646856115920847262863510143351788162589e-18),
T(6.702965108690828364081014557181541282562e-19),
T(2.637789126539856458656935415998560900038e-18),
T(1.371335492054201913448291710418258705011e-18),
T(2.41424575053586963684733457376327312022e-18),
T(-7.026277529919346055816782390274281692568e-19),
T(-0.01397703297534340322839467576329405692713),
T(1.738100832058080160133520068124377034641e-18),
T(0.001924998584637754640314931248048062763642),
T(-2.080723652127513238026424906235682471793e-18),
T(-0.003290996097855393927272102022699843952165),
T(1.125635177892432251954173171309605145365e-18),
T(-0.001970532334130543732387806202864273947656),
T(-1.181529993200291522497618399739502331479e-18),
T(0.0005048913562209898673005188601774749202531),
T(4.130625321252075637724117703115173957871e-18),
T(0.001215028160268882637222919969147839092874),
T(-1.145851541357832551081021018923936322109e-18),
T(0.002016055522819940030114180534042326145364),
T(-1.786201951376368721022571652633810315137e-18),
T(0.001202502582875023909453695656915227906835),
T(1.715355764048957031967573268200237441735e-18),
T(-0.001661521359244224244323442291975229473415),
T(-2.113143580794530403112655656671484620296e-18),
T(-0.001595119214278977342853689592281942106678),
T(1.481544079716366737859169078985733797631e-18),
T(0.001214238367146642326300333486366824156292),
T(4.02075866804471699229024257168296426683e-18),
T(2.127742696848015204805029245524455975076e-18),
T(1.610069716308523232034931602839521993468e-18),
T(-1.480620903200463318732005469286379653445e-18),
T(-4.393121658730359646310043699278994048716e-18),
T(-7.017160485555218550735627965218778362896e-19),
T(1.954103175925330582226165575241168578619e-18),
T(2.484311944487799698049418667444070188084e-19),
T(7.683278309686887636035611352296059578306e-19),
T(1.766783624046609288063978593841236340872e-18),
T(-3.531222653961772981925963605903908195856e-19),
T(-3.157820775830074871439329018189323660907e-18),
T(-1.488975624834908163581358051628228204665e-18),
T(1.77444256947093335069154774679278108969e-18),
T(2.045025578977347004447321706108565594972e-18),
T(2.076625356781287561470108539291392265215e-18),
T(-3.532912654764337620407561276609810716187e-19),
T(-1.81440923375700935622914949623268690916e-18),
T(-1.857054358459125320599157637630659736326e-19),
T(-1.725851031686843326814720537152448075442e-18),
T(-1.037243879091583545100025685906815863406e-18),
T(-0.01507932858442475994459570743602970275683),
T(-1.975876850113065962681648330679842682959e-18),
T(0.008001299054631094241845204023825814836225),
T(3.730446809828144520282927064435325006552e-18),
T(-0.000444501788824484517516615697322680955233),
T(-3.31800789707036118052980251443582956248e-18),
T(0.0009305811223835391482520413050288043047444),
T(1.077024720125734043121695670656974705288e-18),
T(0.001464504110837740598846217820329126386218),
T(-7.071559834070298888161404517324834616924e-19),
T(-0.001248731022614454649657323831811503011687),
T(-2.68919476035670181838345170720068798242e-18),
T(-0.001693194237064547344082899895133639417191),
T(4.081182005994527561438631867719784652389e-18),
T(-0.0008445229557077226283055506418676529043783),
T(-2.805939532185942708548056377764649350804e-18),
T(-0.00003346913492134103729405380595109601313308),
T(1.722374846081688427060446356352583214402e-18),
T(0.001402886804678414098409914926696718319182),
T(1.332016689753008216617583127904239984101e-20),
T(0.0007497835274979566276158537138474731505225),
T(7.920512346168217783299820910893765771568e-18),
T(1.012886186963077872969569141580734310545e-18),
T(-3.497821945265508156975433366513073809978e-18),
T(-6.968916918254267876504704294219435464559e-19),
T(2.899031396003458498739460437859910752344e-18),
T(9.013405063899648607603661426432472246665e-19),
T(-1.083242059988290487761248648249172485366e-18),
T(-3.158124820060827802241508903374240038505e-19),
T(-1.062099969644152633113302497740880926971e-18),
T(-5.619754787451831733144650451697565129654e-19),
T(1.639069769545888639049053754451147754562e-18),
T(1.254440456787877621863069259060455827822e-18),
T(-4.212017567972871823547954260017979837583e-19),
T(1.062143081540028182476417922049907938646e-19),
T(-4.153698421450141858476076475492420041807e-19),
T(-3.108765506978016547046340796931391652115e-18),
T(-6.13704927422583195317894008596527808887e-19),
T(2.362711551238090054184208276740306820828e-18),
T(4.576348520275041311195030847270537203766e-19),
T(7.20631302511499533828563994279204859013e-20),
T(3.49936748396125163339866751174406445177e-19),
T(-0.007511451585956706354825970485105101673997),
T(4.110867261223549835604501723769801571345e-18),
T(0.001194806922789586748562751084295800703648),
T(-6.159069206070828120445973664209741256796e-18),
T(-0.002108605615578879622388742353722157207583),
T(4.583177447712624595844515430416922798718e-18),
T(-0.0009976948412415343166730808452277920828981),
T(-1.693328217750107391200579206543966755904e-19),
T(-0.000172126488277389067933138025097298264135),
T(-1.44664395959608752270367584575727165925e-18),
T(-0.00006393821117389272003529861762517667423206),
T(3.156963537113480675886537439415928668351e-18),
T(0.001059431305301857273459702326609708967295),
T(-2.227066784969013228194588462606974897019e-18),
T(0.001370029704591376104412570178992892328293),
T(1.550177325031453290708731547506417051822e-19),
T(0.0002488425005421530667930109061729092413183),
T(1.11858529767818480050540705933197542725e-18),
T(-0.0007521873775538212327749608402667241339296),
T(-2.053241043069947411377894714492611643329e-18),
T(-0.000931212171240863945800845395815642988552),
T(-9.74621937538872299400497340944258509246e-18),
T(-3.007836099222574254699932543681420327711e-18),
T(1.58174136059090467400301599999930684133e-18),
T(1.592884968772244893821873590672608636812e-18),
T(1.54004691384510590765400110636789124229e-19),
T(-2.698345700291366409298951040929450728907e-19),
T(-1.729688625163782981119156003354643982723e-19),
T(1.332627190542830144489543015812004882947e-19),
T(6.336681977453841530029755369675031106475e-19),
T(-6.16927987958765750574685698867268568344e-19),
T(-1.065136608682674898843944296823024606066e-18),
T(3.171876701357530133403898933430367722242e-19),
T(-1.960534653646704471372997555647980962863e-20),
T(-9.891461565556721415801117557214446791359e-19),
T(8.031446109335046330924738114913284564706e-19),
T(2.634619752752498661503220520483811434677e-18),
T(2.834361276223336184362352335903987060525e-19),
T(-1.176973431523755394465981798695405680178e-18),
T(-1.263955263812541819775194026175993424217e-19),
T(-7.244751116071382058770673718316083154041e-19),
T(-4.725016874613273379830890247983360323934e-20),
T(0.0076634290391161173490050673545584065291),
T(-3.141181191536095183437086117306455549206e-18),
T(-0.001476308870541616308033964198016579961865),
T(4.376493852589844422579665937648046572396e-18),
T(0.00161842502514579005222516921964700945318),
T(-2.912297907029929675040622706666796428644e-18),
T(0.001030988993993182790317612043419367201813),
T(-1.396253738361056182094127534183225359304e-19),
T(0.0001051274587078621822886472704879663033442),
T(-8.154286551007134431209613369616734863106e-20),
T(0.0001562306730206208945439380767621782523892),
T(9.433376909437556546360291708568877625159e-20),
T(-0.0004905361148568990506394239662002592348013),
T(-8.733305156125895646264543660597905774637e-19),
T(-0.001168135806454311448006030688890505088664),
T(1.157314372193713562616041064332895883401e-18),
T(-0.0006136544509058460229421943929548813312284),
T(-1.365993827556136576167266623564155053669e-18),
T(0.0002933253994458255777397903649305930728207),
T(1.733090400813789657170110631932352829978e-18),
T(0.0007527117611494407769207144646315808760263)
        };

    for (int i=0, off = 0; i <= this->qdeg(); i += 1)
       {
       for (int j=i; j <= this->qdeg()-i; j += 1, off++)
          {
              this->b_(off) = b_exact[j*21 + i];
          } 
       }
}

template<typename T>
inline constexpr int
PolyDomain<T>::nbfn_for_qdeg(int qdeg)
{
    int n = 0;

    for (int i = 0; i <= qdeg; i += 1)
        for (int j = i; j <= qdeg - i; j += 1, ++n);

    return n;
}

template<typename T>
void
PolyDomain<T>::expand_orbit(int i, int aoff, int poff,
                           const VectorXT& args, MatrixPtsT& pts) const
{
    switch (i)
    {
        case 0:
        {
            pts.row(poff) = vector2d(T(0.), T(0.));
            break;
        }
        case 1:
        {
            const T& a = args(aoff + 0);
            pts.row(poff + 0) = vector2d(a*T(0.75), a*T(0.4330127018922193233818615853764680917357));
pts.row(poff + 1) = vector2d(a*T(-8.609577764811676083755394559733244710586e-42), a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 2) = vector2d(a*T(-0.75), a*T(0.4330127018922193233818615853764680917357));
pts.row(poff + 3) = vector2d(a*T(-0.75), a*T(-0.4330127018922193233818615853764680917357));
pts.row(poff + 4) = vector2d(a*T(2.008901478456057752876258730604423765803e-41), a*T(-0.8660254037844386467637231707529361834714));
pts.row(poff + 5) = vector2d(a*T(0.75), a*T(-0.4330127018922193233818615853764680917357));

            break;
        }
        case 2:
        {
            const T& a = args(aoff + 0);
            pts.row(poff + 0) = vector2d(a*T(1.0), a*T(0.0));
pts.row(poff + 1) = vector2d(a*T(0.5), a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 2) = vector2d(a*T(-0.5), a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 3) = vector2d(a*T(-1.0), a*T(4.134064219652797647299380610320968938829e-43));
pts.row(poff + 4) = vector2d(a*T(-0.5), a*T(-0.8660254037844386467637231707529361834714));
pts.row(poff + 5) = vector2d(a*T(0.5), a*T(-0.8660254037844386467637231707529361834714));

            break;
        }
        case 3:
        {
            const T& a = args(aoff + 0);
            const T& b = args(aoff + 1);
            pts.row(poff + 0) = vector2d(b*a*T(0.75) + (1-b)*a*T(1.0),b*a*T(0.4330127018922193233818615853764680917357) + (1-b)*a*T(0.0));
pts.row(poff + 1) = vector2d(b*a*T(0.5) + (1-b)*a*T(1.0),b*a*T(0.0) + (1-b)*a*T(0.0));
pts.row(poff + 2) = vector2d(b*a*T(-8.609577764811676083755394559733244710586e-42) + (1-b)*a*T(0.5),b*a*T(0.8660254037844386467637231707529361834714) + (1-b)*a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 3) = vector2d(b*a*T(0.75) + (1-b)*a*T(0.5),b*a*T(0.4330127018922193233818615853764680917357) + (1-b)*a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 4) = vector2d(b*a*T(-0.75) + (1-b)*a*T(-0.5),b*a*T(0.4330127018922193233818615853764680917357) + (1-b)*a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 5) = vector2d(b*a*T(-8.609577764811676083755394559733244710586e-42) + (1-b)*a*T(-0.5),b*a*T(0.8660254037844386467637231707529361834714) + (1-b)*a*T(0.8660254037844386467637231707529361834714));
pts.row(poff + 6) = vector2d(b*a*T(-0.75) + (1-b)*a*T(-1.0),b*a*T(-0.4330127018922193233818615853764680917357) + (1-b)*a*T(4.134064219652797647299380610320968938829e-43));
pts.row(poff + 7) = vector2d(b*a*T(-0.75) + (1-b)*a*T(-1.0),b*a*T(0.4330127018922193233818615853764680917357) + (1-b)*a*T(4.134064219652797647299380610320968938829e-43));
pts.row(poff + 8) = vector2d(b*a*T(2.008901478456057752876258730604423765803e-41) + (1-b)*a*T(-0.5),b*a*T(-0.8660254037844386467637231707529361834714) + (1-b)*a*T(-0.8660254037844386467637231707529361834714));
pts.row(poff + 9) = vector2d(b*a*T(-0.75) + (1-b)*a*T(-0.5),b*a*T(-0.4330127018922193233818615853764680917357) + (1-b)*a*T(-0.8660254037844386467637231707529361834714));
pts.row(poff + 10) = vector2d(b*a*T(0.75) + (1-b)*a*T(0.5),b*a*T(-0.4330127018922193233818615853764680917357) + (1-b)*a*T(-0.8660254037844386467637231707529361834714));
pts.row(poff + 11) = vector2d(b*a*T(2.008901478456057752876258730604423765803e-41) + (1-b)*a*T(0.5),b*a*T(-0.8660254037844386467637231707529361834714) + (1-b)*a*T(-0.8660254037844386467637231707529361834714));

            break;
        }
        default:
            assert(0 && "Bad orbit"), abort();
    }
}

template<typename T>
inline void
PolyDomain<T>::seed_orbit(int i, int aoff, VectorXT& args)
{

    switch (i)
    {
        case 0:
            break;
        case 1:
        case 2:
            args(aoff) = this->rand();
            break;
        case 3:
            args(aoff + 0) = this->rand();
            args(aoff + 1) = this->rand();
            break;
        default:
            assert(0 && "Bad orbit"), abort();
    }
}

template<typename T>
template<typename D1, typename D2>
inline void
PolyDomain<T>::eval_orthob_block(const D1 pq, D2 out) const
{
    typedef Eigen::Array<T, D1::RowsAtCompileTime, 1> ArrayT;

    const auto& p = pq.col(0);
    const auto& q = pq.col(1);

    const ArrayT a = p;
    const ArrayT b = q;

    const T half = 0.5;

    JacobiP<ArrayT> jpa(0, 0, a);

    for (int i = 0, off = 0; i <= this->qdeg(); i += 1)
    {
        JacobiP<ArrayT> jpb(0, 0, b);
        for (int j = i; j <= this->qdeg() - i; j += 1, ++off)
        {
            out.row(off) = jpa(i)*jpb(j);
        }
    }
}

template<typename T>
template<typename ReplaceF>
void inline
PolyDomain<T>::collapse_arg(int i, int aoff, const VectorXT& args,
                           ReplaceF replace, const T& tol)
{
    
    if (i == 1 || i == 2 && abs(args(aoff)) < tol)
        replace(0);
    else if (i == 3)
    {
        const T a = args(aoff + 0), b = args(aoff + 1);

        if (abs(a) < tol)
             replace(0);
        else if (abs(b) < tol)
            replace(2, a);
        else if (1 - abs(b) < tol)
            replace(1, a);
    }
}

template<typename T>
inline void
PolyDomain<T>::clamp_arg(int i, int aoff, VectorXT& args)
{
    switch (i)
    {
        case 0:
            break;
        case 1:
        case 2:
            args(aoff) = clamp(0, args(aoff), 1);
            break;
        case 3:
            args(aoff + 0) = clamp(0, args(aoff + 0), 1);
            args(aoff + 1) = clamp(0, args(aoff + 1), 1);
            break;
        default:
            assert(0 && "Bad orbit"), abort();
    }
}

template<typename T>
inline void
PolyDomain<T>::sort_arg(int i, int aoff, VectorXT& args)
{
    
}

}   

#endif /* POLYQUAD_SHAPES_HEXA_HPP */
    